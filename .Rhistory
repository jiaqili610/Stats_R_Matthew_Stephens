x = seq(0,10,length=100)
?seq
plot(x, 0.7*dgamma(x, scale=0.5, shape=2)+ 0.3*dgamma(x, scale=1 , shape=2))
plot(x, 0.7*dgamma(x, scale=0.5, shape=2)+ 0.3*dgamma(x, scale=1 , shape=2)
, col="blue", type="l", xlab = "protein concentration" , main= "mixture distribution(blue)"
, ylab="density", ylim=c(0,0.8))
lines(x, dgamma(x, scale= 0.5, shape=2), type="l", col="black")
lines(x, dgamma(x, scale=1 , shape =2), type="l", col="red")
plot(x, 0.7*dgamma(x, scale=0.5, shape=2)+ 0.3*dgamma(x, scale=1 , shape=2)
, col="blue", type="l", xlab="protein concentration", main="mixture distribution (blue)\n and component distributions (black,red)", ylab="density", ylim=c(0,0.8))
lines(x, dgamma(x, scale= 0.5, shape=2), type="l", col="black")
lines(x, dgamma(x, scale=1 , shape =2), type="l", col="red")
# simulation
n=10000 # number of samples
x = rep(0,n)
?runif
?rbinom
simu.size <- 1000
simu.prob <- fS
# compute the likelihood and likelihood ratio. for Model 1 and Model 2
rm(list = ls())
# data we observe
x = c(1, 0, 1 , 0, 0 ,1)
# probability distribution of Model1
fS = c(0.40, 0.12, 0.21, 0.12, 0.02, 0.32)
# probability distribution of Model2
fF = c(0.8, 0.2, 0.11, 0.17, 0.23, 0.25)
# a function to calculate the likelihood of model given data x
L = function(f,x) {
prod(f^x * (1-f)^(1-x))
}
LR = L(fS,x)/L(fF,x)
print(LR)
simu.size <- 1000
simu.prob <- fS
simu.species = matrix(1000, col=1)
?matrix
simu.species = matrix(data = NA, nrow= 1000, col=1)
simu.species = matrix(data = NA, nrow= 1000, ncol=1)
simu.species = matrix(data = 1, nrow= 1000, ncol=1)
# compute the likelihood and likelihood ratio. for Model 1 and Model 2
rm(list = ls())
# data we observe
x = c(1, 0, 1 , 0, 0 ,1)
# probability distribution of Model1
fS = c(0.40, 0.12, 0.21, 0.12, 0.02, 0.32)
# probability distribution of Model2
fF = c(0.8, 0.2, 0.11, 0.17, 0.23, 0.25)
# a function to calculate the likelihood of model given data x
L = function(f,x) {
prod(f^x * (1-f)^(1-x))
}
LR = L(fS,x)/L(fF,x)
print(LR)
simu.size <- 1000
simu.prob <- fS
simu.S = matrix(data = 1, nrow= 1000, ncol=1)
View(simu.S)
View(simu.S)
?rbinom
Z = rbinom(10,1,0.75)
Z = rbinom(1000,2,0.75)
Z = rbinom(1000,1,0.75)
Z = rbinom(1000,1, simu.prob)
Z = rbinom(1000,1, simu.prob)
matrix
Z = rbinom(1000,1, simu.prob)
sim.d = matrix(rep(fS),1000)
sim.d = matrix(rep(fS, 1000))
View(sim.d)
sim.d = matrix(rep(fS, 1000), nrow=6)
View(sim.d)
sim.simu.data = rbinom(1,1,sim.prob)
simu.size <- 1000
simu.prob <- fS
sim.simu.data = rbinom(1000,1,sim.prob)
simu.prob <- fS
sim.simu.data = rbinom(1000,1)
apply(fs, function(x) {
rbinom(1000,1, x)
})
binomg <- function(x) {
rbinom(1000,1, x)
}
apply(fs, binomg)
lapply(fs, binomg)
lapply(fS, binomg)
# compute the likelihood and likelihood ratio. for Model 1 and Model 2
rm(list = ls())
# data we observe
x = c(1, 0, 1 , 0, 0 ,1)
# probability distribution of Model1
fS = c(0.40, 0.12, 0.21, 0.12, 0.02, 0.32)
# probability distribution of Model2
fF = c(0.8, 0.2, 0.11, 0.17, 0.23, 0.25)
# a function to calculate the likelihood of model given data x
L = function(f,x) {
prod(f^x * (1-f)^(1-x))
}
LR = L(fS,x)/L(fF,x)
print(LR)
simu.size <- 1000
simu.prob <- fS
binomg <- function(x) {
rbinom(1000,1, x)
}
lapply(fS, binomg)
matrix.prob <- matrix(rep(fs, 1000) nrow=6)
matrix.prob <- matrix(rep(fs, 1000) , nrow=6)
simu.prob <- fS
matrix.prob <- matrix(rep(simu.prob, 1000) , nrow=6)
View(matrix.prob)
matrix.prob <- matrix(rep(simu.prob, 1000) , nrow=6)
binomg <- function(x) {
rbinom(1000,1, x)
}
set.seed <- 10
seed <- 10
set.seed(seed)
# compute the likelihood and likelihood ratio. for Model 1 and Model 2
rm(list = ls())
# data we observe
x = c(1, 0, 1 , 0, 0 ,1)
# probability distribution of Model1
fS = c(0.40, 0.12, 0.21, 0.12, 0.02, 0.32)
# probability distribution of Model2
fF = c(0.8, 0.2, 0.11, 0.17, 0.23, 0.25)
# a function to calculate the likelihood of model given data x
L = function(f,x) {
prod(f^x * (1-f)^(1-x))
}
LR = L(fS,x)/L(fF,x)
print(LR)
simu.size <- 1000
simu.prob <- fS
seed <- 10
matrix.prob <- matrix(rep(simu.prob, 1000) , nrow=6)
set.seed(seed)
binomg <- function(x) {
rbinom(1,1, x)
}
simulate_X < - lapply(matrix.prob, binomg)
simulate_X <- lapply(matrix.prob, binomg)
View(simulate_X)
lapply(matrix.prob, binomg)
View(matrix.prob)
simulate_X <- sapply(matrix.prob, binomg)
?sapply
simulate_X <- sapply(matrix.prob, binomg)
# compute the likelihood and likelihood ratio. for Model 1 and Model 2
rm(list = ls())
# compute the likelihood and likelihood ratio. for Model 1 and Model 2
rm(list = ls())
# data we observe
x = c(1, 0, 1 , 0, 0 ,1)
# probability distribution of Model1
fS = c(0.40, 0.12, 0.21, 0.12, 0.02, 0.32)
# probability distribution of Model2
fF = c(0.8, 0.2, 0.11, 0.17, 0.23, 0.25)
# a function to calculate the likelihood of model given data x
L = function(f,x) {
prod(f^x * (1-f)^(1-x))
}
LR = L(fS,x)/L(fF,x)
print(LR)
simu.size <- 1000
simu.prob <- fS
seed <- 10
set.seed(seed)
binomg <- function(x) {
rbinom(1000,1, x)
}
simulate_X <- sapply(simu.prob, binomg)
View(simulate_X)
View(simulate_X)
simulate_X <- lapply(simu.prob, binomg)
View(simulate_X)
simulate_X <- sapply(simu.prob, binomg)
# compute the likelihood and likelihood ratio. for Model 1 and Model 2
rm(list = ls())
# data we observe
x = c(1, 0, 1 , 0, 0 ,1)
# probability distribution of Model1
fS = c(0.40, 0.12, 0.21, 0.12, 0.02, 0.32)
# probability distribution of Model2
fF = c(0.8, 0.2, 0.11, 0.17, 0.23, 0.25)
# a function to calculate the likelihood of model given data x
L = function(f,x) {
prod(f^x * (1-f)^(1-x))
}
LR = L(fS,x)/L(fF,x)
print(LR)
simu.size <- 1000
simu.prob <- fS
seed <- 10
set.seed(seed)
binomg <- function(x) {
rbinom(1000,1, x)
}
##################################################################
# SIMULATION - EXERCISE
##################################################################
seed <- 10
set.seed(seed)
simu.size <- 1000
binomg <- function(x) {
rbinom(simu.size,1, x)
}
simulate_S <- sapply(fS, binomg)
simulate_F <- sapply(fF, binomg)
View(simulate_F)
View(simulate_S)
# calculate likelihood
Likelihood.S.forSmodel = L(fS, simulate_S)
View(simulate_S)
# calculate likelihood
Likelihood.S.forSmodel = apply(simulate_S, 1, L)
# calculate likelihood
Likelihood.S.forSmodel = apply(simulate_S, 1, function(x) {L(fS, x)})
Likelihood.S.forFmodel = apply(simulate_S, 1, function(x) {L(fF, x)})
Likelihood.Ratio = Likelihood.S.forSmodel / Likelihood.S.forFmodel
sum(Likelihood.Ratio)
mean(Likelihood.Ratio)
# calculate likelihood ratio - for F simulated data
Likelihood.F.forSmodel = apply(simulate_F, 1, function(x) {L(fS, x)})
Likelihood.F.forFmodel = apply(simulate_F, 1, function(x) {L(fF, x)})
# compute the likelihood and likelihood ratio. for Model 1 and Model 2
rm(list = ls())
# data we observe
x = c(1, 0, 1 , 0, 0 ,1)
# probability distribution of Model1
fS = c(0.40, 0.12, 0.21, 0.12, 0.02, 0.32)
# probability distribution of Model2
fF = c(0.8, 0.2, 0.11, 0.17, 0.23, 0.25)
# a function to calculate the likelihood of model given data x
L = function(f,x) {
prod(f^x * (1-f)^(1-x))
}
LR = L(fS,x)/L(fF,x)
print(LR)
##################################################################
# SIMULATION - EXERCISE
##################################################################
seed <- 10
set.seed(seed)
simu.size <- 1000
binomg <- function(x) {
rbinom(simu.size,1, x)
}
simulate_S <- sapply(fS, binomg)
simulate_F <- sapply(fF, binomg)
# calculate likelihood ratio - for S simulated data
Likelihood.S.forSmodel = apply(simulate_S, 1, function(x) {L(fS, x)})
Likelihood.S.forFmodel = apply(simulate_S, 1, function(x) {L(fF, x)})
Likelihood.Ratio.S = Likelihood.S.forSmodel / Likelihood.S.forFmodel
mean(Likelihood.Ratio)
mean(Likelihood.Ratio.S)
# calculate likelihood ratio - for F simulated data
Likelihood.F.forSmodel = apply(simulate_F, 1, function(x) {L(fS, x)})
Likelihood.F.forFmodel = apply(simulate_F, 1, function(x) {L(fF, x)})
Likelihood.Ratio.F = Likelihood.F.forSmodel / Likelihood.F.forFmodel
mean(Likelihood.Ratio.F)
lc <= 2
lc <- 2
Likelihood.Ratio.F = Likelihood.F.forFmodel / Likelihood.F.forSmodel
mean(Likelihood.Ratio.F)
lc <- 2
generate predict.S.S = Likelihood.Ratio.S >  lc
generate predict.F.F = Likelihood.Ratio.F > lc
lc <- 2
Misclassification.S <- Likelihood.Ratio.S <= lc
Misclassification.F <- Likelihood.Ratio.F <= lc
mean(Misclassification.S)
mean(Misclassification.F)
misrate = function(lc){
Misclassification.S <- Likelihood.Ratio.S <= lc
Misclassification.F <- Likelihood.Ratio.F <= lc
mean(Misclassification.S) + mean(Misclassification.F)
}
misrate(2)
?c
# plot the misrate and c range
c <- seq(0, 100, by = 0.01)
misrateseq = sapply(c, misrate)
misrate(2)
plot(log10(c), misrate)
plot(log10(c), misrateseq)
misrate = function(lc){
Misclassification.S <- Likelihood.Ratio.S <= lc
Misclassification.F <- Likelihood.Ratio.F <= lc
(mean(Misclassification.S) + mean(Misclassification.F))/2
}
misrate(2)
# plot the misrate and c range
c <- seq(0, 100, by = 0.01)
misrateseq = sapply(c, misrate)
plot(log10(c), misrateseq)
plot(c, misrateseq)
plot(log10(c), misrateseq)
plot(lc, misrateseq)
plot(c, misrateseq)
rm(list = ls())
c <- seq(0,10,1000)
?seq
c <- seq(0,10,length=1000)
# visualisation
c = seq(0,10,length=1000)
# visualisation
c <- seq(0,10,length=1000)
rm(list = ls())
# visualisation
x <- seq(0,10,length=1000)
# visualisation
x <- seq(0,10,length=1000)
plot(x, dgamma(x, scale=1, shape=2) , type="l", xlab= "protein concentration")
lines(x, dgamma(x, scale=2, shape = 2), type="l", col="red")
plot(x, dgamma(x, scale=0.5, shape=2) , type="l", xlab= "protein concentration")
lines(x, dgamma(x, scale=1, shape = 2), type="l", col="red")
# if we observe a person with protein concentration 4.02
# the likelihood ratio of him healthy to sick
dgamma(4.02, scale=0.5, shape=2)/dgamma(4.02, scale=1, shape=2)
# if we observe a person with protein concentration 4.02
# the likelihood ratio of him healthy to sick
dgamma(4.02, scale=1, shape=2)/dgamma(4.02, scale=0.5, shape=2)
?rnorm
X = exp(rnorm(1000, -5, 2))
Z= log(X)
X <- exp(rnorm(1000, -5, 2))
Z <- log(X)
# graph look
par(mfcol=c(2,2))
hist(X)
hist(Z)
qqnorm(X)
qqnorm(Z)
# parameter space
q <- seq(0,1, length=1000)
# Likelihood function
L = function(q) {
q^30(1-q)^70
}
plot(q, L(q), ylab="L(q)", xlab="q", type="l")
# Likelihood function
L = function(q) {
q^30(1-q)^70
}
plot(q, L(q), ylab="L(q)", xlab="q", type="l")
# parameter space
q <- seq(0,1, length=1000)
plot(q, L(q), ylab="L(q)", xlab="q", type="l")
# Likelihood function
L = function(q) {
q^30*(1-q)^70
}
plot(q, L(q), ylab="L(q)", xlab="q", type="l")
# Clear console
cat("\014")  # ctrl+L
rm(list = ls())
# parameter space
q <- seq(0,1, length=1000)
# Likelihood function
L = function(q) {
q^30*(1-q)^70
}
plot(q, L(q), ylab="L(q)", xlab="q", type="l")
par(mfcol=c(1,1))
plot(q, L(q), ylab="L(q)", xlab="q", type="l")
30*ln(q) + 70*ln(1-q)
log(exp(3))
# we can also use log_e likelihood function
LL = function(q){
30*log(q) + 70*log(1-q)
}
plot(q, LL(q), ylab = "log L(q)", xlab = "q", type = "l")
# we can also use log_e likelihood function
q <- seq(0,1, length=1000)
# we can also use log_e likelihood function
q <- seq(0,1, length=100)
LL = function(q){
30*log(q) + 70*log(1-q)
}
plot(q, LL(q), ylab = "log L(q)", xlab = "q", type = "l")
plot(q, LL(q)-LL(0.3), ylab = "log L(q)", xlab = "q", type = "l")
plot(q, LL(q)-LL(0.3), ylab = "log L(q)", xlab = "q", type = "l")
LL = function(q){
30*log(q) + 70*log(1-q)
}
# we can also use log_e likelihood function
q <- seq(0,1, length=100)
plot(q, LL(q)-LL(0.3), ylab = "log L(q)", xlab = "q", type = "l")
plot(q, LL(q)-LL(0.3), ylab = "log L(q) - Log l(0.3)", xlab = "q", type = "l")
# we can also use log_e likelihood function
q <- seq(0,1, length=100)
LL = function(q){
30*log(q) + 70*log(1-q)
}
plot(q, LL(q)-LL(0.3), ylab = "log L(q) - Log l(0.3)", xlab = "q", type = "l")
plot(q, LL(q)-LL(0.3), ylab = "log L(q) - Log l(0.3)", xlab = "q", type = "l", ylim=c(-10,0)
plot(q, LL(q)-LL(0.3), ylab = "log L(q) - Log l(0.3)", xlab = "q", type = "l", ylim=c(-10,0)
plot(q, LL(q)-LL(0.3), ylab = "log L(q) - Log l(0.3)", xlab = "q", type = "l", ylim=c(-10,0))
?ylim
plot(q, LL(q)-LL(0.3), ylab = "log L(q) - Log l(0.3)", xlab = "q", type = "l", ylim=c(-10,0))
